<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chapter5 on Ibiza</title>
    <link>http://kimmj.github.io/ansible/ansible-for-devops/chapter5/</link>
    <description>Recent content in Chapter5 on Ibiza</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 28 Feb 2020 11:05:34 +0900</lastBuildDate>
    
	<atom:link href="http://kimmj.github.io/ansible/ansible-for-devops/chapter5/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ansible Playbooks Beyond the Basics</title>
      <link>http://kimmj.github.io/ansible/ansible-for-devops/chapter5/ansible-playbooks-beyond-the-basics/</link>
      <pubDate>Fri, 28 Feb 2020 11:06:02 +0900</pubDate>
      
      <guid>http://kimmj.github.io/ansible/ansible-for-devops/chapter5/ansible-playbooks-beyond-the-basics/</guid>
      <description>playbook과 우리가 이전에 사용한 간단한 playbook organization은 많은 일반적인 use case를 커버할 수 있다. system administration이 필요로 하는 폭에 대해 얘기하자면 Ansible에는 우리가 알아야 할 수많은 기능들이 있다. 우리는 play를 어떻게 더 세분화하여 실행하는지, simplicity와 usability를 위해 어떻게 task와 playbook을 구성하는지, infrastructure를 더 자신있게 다룰 수 있도록 해주는 다른 advanced playbook topic에 대해 다루어 볼 것이다.</description>
    </item>
    
    <item>
      <title>Handover</title>
      <link>http://kimmj.github.io/ansible/ansible-for-devops/chapter5/handover/</link>
      <pubDate>Sun, 01 Mar 2020 00:22:17 +0900</pubDate>
      
      <guid>http://kimmj.github.io/ansible/ansible-for-devops/chapter5/handover/</guid>
      <description>chapter 4에서 Ubuntu LAMP server 예제는 Apache를 재시작하는 간단한 handler를 사용하였고 Apache의 configuration에 영향을 주는 특정한 task들이 notify: restart apache라는 옵션으로 handler에게 noti를 줬었다.
handlers: - name: restart apache service: name=apache2 state=restarted tasks: - name: Enable Apache rewrite module apache2_module: name=rewrite state=present notify: restart apache 어떤 상황에서는 여러개의 handler에 notify를 해야할 상황이 있을 수도 있다. 또는 어떤 handler는 다른 추가적인 handler에게 notify를 해야할 수도 있다. 이 두가지 모두 Ansible에서는 쉽게 할 수 있다.</description>
    </item>
    
    <item>
      <title>Environment Variables</title>
      <link>http://kimmj.github.io/ansible/ansible-for-devops/chapter5/environment-variables/</link>
      <pubDate>Sun, 01 Mar 2020 18:43:27 +0900</pubDate>
      
      <guid>http://kimmj.github.io/ansible/ansible-for-devops/chapter5/environment-variables/</guid>
      <description>Ansible은 다양한 방법으로 environment variable을 사용할 수 있도록 해준다. 첫번째로 remote user account에 대해 어떤 environment variable을 설정하고자 한다면 remote user의 .bash_profile에 다음과 같이 추가하면 된다.
- name: Add an environment variable to the remote user&amp;#39;s shell lineinfile: dest=~/.bash_profile regexp=^ENV_VAR= line=ENV_VAR=value 그러면 다음에 실행되는 모든 task는 이 environment variable에 접근할 수 있다. (물론 shell module만 environment variable을 사용하는 shell command를 이해할 것이다!) environment variable을 나중 task에서 사용하려면 task의 register 옵션을 사용하여 environment variable을 variable에 저장하여 Ansible이 나중에 사용할 수 있도록 하는 것을 추천한다.</description>
    </item>
    
  </channel>
</rss>