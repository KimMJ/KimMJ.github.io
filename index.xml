<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ibiza</title>
    <link>http://kimmj.github.io/</link>
    <description>Recent content on Ibiza</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 Jan 2020 01:00:14 +0900</lastBuildDate>
    
	<atom:link href="http://kimmj.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Install</title>
      <link>http://kimmj.github.io/category/ci-cd/spinnaker/installation/overview/</link>
      <pubDate>Fri, 10 Jan 2020 01:02:39 +0900</pubDate>
      
      <guid>http://kimmj.github.io/category/ci-cd/spinnaker/installation/overview/</guid>
      <description>Overview of install Spinnaker 어떻게 Spinnaker를 설치 및 배포하는지 알아보도록 하겠습니다.
가장 먼저 최소 사양을 확인해보도록 하겠습니다.
링크 : https://www.spinnaker.io/guides/developer/getting-set-up/#system-requirements
 램 18 GB CPU 4코어 Ubuntu 14.04, 16.04, 18.04  Spinnaker 자체가 클라우드 환경에만 배포가 가능하기 때문에, 아마도 &amp;ldquo;전체 클라우드를 합하여 저정도면 된다&amp;quot;를 의미하는 것 같습니다.
설치 방법은 두가지로 나뉩니다.
 테스트를 목적으로 Helm Chart를 통한 설치 실제로 사용할 목적으로 halyard를 통한 설치  저는 여기서 2번 halyard를 통한 설치를 해보려고 합니다.</description>
    </item>
    
    <item>
      <title>Install Halyard</title>
      <link>http://kimmj.github.io/category/ci-cd/spinnaker/installation/install-halyard/</link>
      <pubDate>Sat, 11 Jan 2020 01:41:08 +0900</pubDate>
      
      <guid>http://kimmj.github.io/category/ci-cd/spinnaker/installation/install-halyard/</guid>
      <description>halyard란? halyard는 Spinnaker를 배포할 때 사용하는 CLI 툴입니다.
halyard는 Spinnaker 관련 설정들의 validation, 배포한 환경 백업, 설정 추가 및 변경에 사용됩니다.
설치 방법 선택하기 총 2가지 방법으로 halyard를 설치할 수 있습니다.
 Debian/Ubuntu나 macOS에 직접 설치하기 Docker 사용하기  Spinnaker Docs에서는 실제 Production 환경이라면 직접 설치하는 방법을, 그게 아니라 간단하게 사용하려면 docker를 사용해도 된다고 하고 있습니다.
그리고 한가지의 옵션이 더 있습니다.
 인터넷이 되지 않는 환경 (프록시나 방화벽 등으로 halyard를 통한 설치가 어려운 경우)  이 글을 작성하고 있는 환경은 인터넷이 잘 되는 환경입니다.</description>
    </item>
    
    <item>
      <title>Font Change</title>
      <link>http://kimmj.github.io/category/hugo/ibiza/font-change/</link>
      <pubDate>Sun, 12 Jan 2020 16:28:31 +0900</pubDate>
      
      <guid>http://kimmj.github.io/category/hugo/ibiza/font-change/</guid>
      <description>Lorem Ipsum.</description>
    </item>
    
    <item>
      <title>Episode5</title>
      <link>http://kimmj.github.io/english/himwm/season1/episode5/</link>
      <pubDate>Sat, 11 Jan 2020 00:03:30 +0900</pubDate>
      
      <guid>http://kimmj.github.io/english/himwm/season1/episode5/</guid>
      <description>Did I just have a stroke? 여기서 stroke은 뇌졸증이라고 해석할 수 있습니다. 이를 약간은 의역하자면 내가 뇌졸증에 걸렸나?보단 내 머리가 이상해졌나? 이정도로 생각해보면 될 것 같습니다.
All the things you do when you know where your next thousand lays are coming from. 이 말 앞에는 마샬, 릴리가 약혼 후에 더욱 성숙해지고자 북클럽에 가입하고, 와인파티를 한다는 내용이 있습니다. 여기서 바니가 위의 대사를 하는데 이러한 것들(성숙해지고자 하는 행동들)은 where your next thousand lays are coming from을 알때나 하는 행동이라는 뜻입니다.</description>
    </item>
    
    <item>
      <title>HUGO로 HTML이 되지 않을 때 가능하게 하는 방법</title>
      <link>http://kimmj.github.io/category/hugo/hugo-with-html/</link>
      <pubDate>Fri, 10 Jan 2020 02:22:34 +0900</pubDate>
      
      <guid>http://kimmj.github.io/category/hugo/hugo-with-html/</guid>
      <description>Hugo는 markdown을 기본적으로 사용하지만 html을 이용해서 좀 더 다양하게 커스터마이징이 가능한 장점도 가지고 있습니다.
하지만 저는 처음에 html 코드를 사용하게 되면 &amp;lt;!-- raw HTML omitted --&amp;gt;와 같은 줄로 대치가 되곤 했습니다. 구글링 결과 이는 Hugo의 버전이 0.60.0으로 되면서부터 기본적으로 disable 시켰기 때문입니다.
따라서 다음과 같이 조치를 하면 간단하게 해결이 가능합니다.
[markup.goldmark.renderer] unsafe= true 위와 같은 설정을 config.toml에 추가하기만 하면 됩니다. 추가를 한 뒤 다시 확인해보면 정상적으로 html 코드가 적용된 모습을 볼 수 있습니다.</description>
    </item>
    
    <item>
      <title>Pipeline Expressions</title>
      <link>http://kimmj.github.io/category/ci-cd/spinnaker/tips/pipeline-expressions/</link>
      <pubDate>Fri, 10 Jan 2020 01:33:32 +0900</pubDate>
      
      <guid>http://kimmj.github.io/category/ci-cd/spinnaker/tips/pipeline-expressions/</guid>
      <description>Spinnaker는 배포를 자동화할 때 사용합니다. 그렇기 때문에 자동화를 위해선 다른 곳에서 사용된 값들을 가지고 와야할 필요성이 생기기도 합니다.
이 문서에서는 그럴 때 사용할 수 있는 pipeline function에 대해 알아보도록 하겠습니다.
pipeline에서 다른 pipeline의 값들 불러오기 Note: Pipeline expression syntax is based on Spring Expression Language (SpEL).
 위의 Note에도 적었듯이, Spinnaker는 SpEL을 기반으로 Expressions를 사용합니다. SpEL에 대해 이미 잘 알고있다면 너무나도 좋겠지만, 저는 익숙하지가 않았기 때문에 많은 시행착오를 거쳐서 습득을 하게 되었습니다.</description>
    </item>
    
    <item>
      <title>Importance of Record</title>
      <link>http://kimmj.github.io/my-story/importance-of-record/</link>
      <pubDate>Fri, 10 Jan 2020 00:47:03 +0900</pubDate>
      
      <guid>http://kimmj.github.io/my-story/importance-of-record/</guid>
      <description>기록의 중요성 몇개월 전부터 Spinnaker라는 툴을 가지고 일을 하기 시작했다.
처음 halyard를 통해 deploy하기까지 꽤나 많은 시간을 소요했던 것으로 기억한다. 집에서 하는게 아니라 회사에서 구축을 해야했기 때문에, 프록시와 관련된 설정들이 너무나도 어려웠다. 특히 spinnaker의 docs가 제대로 되어있는 것도 아니기에, 문제가 하나 발생하면 이를 해결하는 데 너무나도 많은 시간이 걸렸다.
하지만 나의 최대 실수는 바로 기록하지 않은 것이다.
그렇게 많은 노력끝에 약 한달만에 첫 deploy를 할 수 있었는데, 이 때 했던 설정을 &amp;ldquo;나중에 정리해야지&amp;quot;라는 안일한 생각으로 지금까지 정리를 안하고 있었다.</description>
    </item>
    
    <item>
      <title>Create Vm With Ansible Libvirt</title>
      <link>http://kimmj.github.io/category/ansible/create-vm-with-ansible-libvirt/</link>
      <pubDate>Wed, 08 Jan 2020 01:52:47 +0900</pubDate>
      
      <guid>http://kimmj.github.io/category/ansible/create-vm-with-ansible-libvirt/</guid>
      <description>Ansible은 어떠한 프로세스를 자동화 할 때 사용할 수 있는 툴입니다. 그리고 libvirt는 linux 환경에서 qemu를 이용하여 VM을 생성할 때 사용하는 python 모듈입니다.
이 두가지를 합하여 Ansible을 통해 VM을 생성하는 방법에 대해 알아보도록 하겠습니다.
ansible-role-libvirt-vm 참조 Github : https://github.com/stackhpc/ansible-role-libvirt-vm
위의 Github 프로젝트는 libvirt를 ansible에서 사용할 수 있도록 만든 오픈소스입니다. 이를 이용하여 ansible-playbook을 통해 VM을 생성해 볼 것입니다.
이를 로컬에 clone 합니다.
git clone https://github.com/stackhpc/ansible-role-libvirt-vm 테스트 환경 저는 Ubuntu 18.04.3 Desktop을 사용하고 있습니다.</description>
    </item>
    
    <item>
      <title>Unattended Ubuntu</title>
      <link>http://kimmj.github.io/category/ubuntu/unattended-ubuntu/</link>
      <pubDate>Wed, 08 Jan 2020 01:52:32 +0900</pubDate>
      
      <guid>http://kimmj.github.io/category/ubuntu/unattended-ubuntu/</guid>
      <description>어디에 좋을까 Ubuntu Server를 설치하기 위해서는 많은 추가 입력이 있어야 합니다. 사용자가 어떻게 설치하기를 원하는지 모르기 때문에, 또 다양한 옵션을 사용자가 선택하기 위해서는 어찌보면 당연한 것이겠지요. 하지만 만약 똑같은 설정을 사용할 것인데, 여러대의 서버에 OS를 설치하는 상황이라고 생각해보면 정말 암울합니다. 온전히 시간을 OS 설치에만 투자하자니 이건 간단한 업무로 인해 다른 업무를 보지 못하게 됩니다. 또 다른 업무와 동시에 하자니 다음 입력창이 뜰 때인지 한번씩 확인해 주어야 합니다.
따라서 어차피 같은 설정을 한다면, 이러한 설정을 미리 해 놓는 방법이 Ubuntu iso 파일 내부에 있을 것이라고 추측했습니다.</description>
    </item>
    
    <item>
      <title>How to Edit Boot Parameter During Install</title>
      <link>http://kimmj.github.io/category/ubuntu/how-to-edit-boot-parameter-during-install/</link>
      <pubDate>Wed, 08 Jan 2020 01:52:12 +0900</pubDate>
      
      <guid>http://kimmj.github.io/category/ubuntu/how-to-edit-boot-parameter-during-install/</guid>
      <description>Ubuntu 설치할 때 boot parameter가 필요한 상황이 간혹 발생할 수 있습니다.
특히 저의 경우, preseed.cfg를 수정하기 위해 인스톨러가 질의하는 것이 preseed.cfg의 어떤것과 대응이 되는지를 보기 위해 DEBCONF_DEBUG=5라는 옵션을 boot parameter로 주어야 했습니다. 이 때 사용할 수 있는 방법을 소개드립니다.
먼저 평소와 같이 ubuntu를 설치하기 위해 설치 이미지를 삽입합니다. 그 다음에는 언어를 선택하시면, 다음으로 넘어가기 전에 메뉴가 뜹니다.
이 상태에서 F6을 누르시면 옵션을 선택할 수 있고, 이 때 ESC키를 누르면 boot parameter가 하단에 보일 것입니다.</description>
    </item>
    
    <item>
      <title>How to Use Sudo Without Password</title>
      <link>http://kimmj.github.io/category/ubuntu/how-to-use-sudo-without-password/</link>
      <pubDate>Wed, 08 Jan 2020 01:51:54 +0900</pubDate>
      
      <guid>http://kimmj.github.io/category/ubuntu/how-to-use-sudo-without-password/</guid>
      <description>/etc/sudoers는 sudo를 사용할 수 있는 파일입니다. 이 파일을 열어보면 다음과 같은 글이 적혀 있습니다.
 Please consider adding local content in /etc/sudoers.d/ instead of directly modifying this file
 즉, 직접 이 파일을 수정해서 sudo 권한을 주지 말고, /etc/sudoers.d/ 폴더 내에 파일을 추가하라는 의미입니다.
이 곳에는 /etc/sudoers와 마찬가지로 계정에 대한 설정을 추가할 수 있습니다. 그리고 /etc/sudoers에서는 &amp;ldquo;NOPASSWD&amp;quot;라는 옵션을 주어 password없이 타 계정의 권한을 가지게 만들 수 있습니다.
이 두가지를 종합하여 내 linux 계정이 sudo 명령어를 입력할 때, 즉 root 권한을 가지게 될 때 password를 입력하지 않도록 설정할 수 있습니다.</description>
    </item>
    
    <item>
      <title>2020 Plan</title>
      <link>http://kimmj.github.io/my-story/2020-plan/</link>
      <pubDate>Wed, 08 Jan 2020 01:51:18 +0900</pubDate>
      
      <guid>http://kimmj.github.io/my-story/2020-plan/</guid>
      <description>2020 새해에는 몇가지 목표가 있다.
 꾸준하게 이 블로그 운영하기 꾸준하게 영어공부 하기 (쉐도잉) 꾸준하게 운동하기 나만의 hugo blog 만들기 적금으로 목돈만들기 개인 공부 많이 하기 CKA 취득  적다보니 너무 많아진 감이 없지않아 있지만, 올해는 자기계발을 많이 할 수 있는 한해가 되었으면 한다.
특히 지금은 누군가가 만든 블로그 테마를 사용하고 있지만 나중에는 내가 원하는 대로 커스터마이징이 가능하도록 나만의 블로그 테마를 만들고 싶다.
이를 위해서는 무엇이 필요한지도, 어떤 기술 스택을 쌓아야 할지도 모르지만 일단 도전해보고자 한다.</description>
    </item>
    
    <item>
      <title>Ibiza Project</title>
      <link>http://kimmj.github.io/my-story/ibiza-project/</link>
      <pubDate>Wed, 08 Jan 2020 01:50:49 +0900</pubDate>
      
      <guid>http://kimmj.github.io/my-story/ibiza-project/</guid>
      <description>Ibiza Project는 나만의 블로그을 만들기 위한 프로젝트이다.
기본적으로 hugo-theme-learn에서 시작하여, 나의 커스텀 파일들을 추가하여 내가 원하는 사이트를 만들 것이다.
기간 : 2020.4.15 (작성일 기준 + 100일)</description>
    </item>
    
  </channel>
</rss>