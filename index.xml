<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ibiza</title>
    <link>http://kimmj.github.io/</link>
    <description>Recent content on Ibiza</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 Jan 2020 01:00:14 +0900</lastBuildDate>
    
	<atom:link href="http://kimmj.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Overview</title>
      <link>http://kimmj.github.io/kubernetes/installation/overview/</link>
      <pubDate>Tue, 14 Jan 2020 01:42:53 +0900</pubDate>
      
      <guid>http://kimmj.github.io/kubernetes/installation/overview/</guid>
      <description>저의 vm으로 구성한 클러스터를 설명드리고자 합니다.
 Cloud Provider: Kubernetes on-prem (4 VMs)  1 for master (4GB Mem, 2 CPU) 3 for worker (each 8GM Mem, 4 CPU)   Kubernetes 1.17.0 Storage Class: Ceph OS: Ubuntu 18.04.2 Server Internal Network: VirtualBox Host-Only Ethernet Adapter (192.168.x.0/24) External Network: Bridge to adapter (192.168.y.0/24)  한번에 쳐야하는 명령어가 많기 때문에, tmux를 사용해서 여러개의 pane을 생성하고 각각에 대해 ssh로 접속하였습니다.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>http://kimmj.github.io/spinnaker/installation/overview/</link>
      <pubDate>Fri, 10 Jan 2020 01:02:39 +0900</pubDate>
      
      <guid>http://kimmj.github.io/spinnaker/installation/overview/</guid>
      <description>Overview of install Spinnaker 어떻게 Spinnaker를 설치 및 배포하는지 알아보도록 하겠습니다.
가장 먼저 최소 사양을 확인해보도록 하겠습니다.
링크 : https://www.spinnaker.io/guides/developer/getting-set-up/#system-requirements
 램 18 GB CPU 4코어 Ubuntu 14.04, 16.04, 18.04  Spinnaker 자체가 클라우드 환경에만 배포가 가능하기 때문에, 아마도 &amp;ldquo;전체 클라우드를 합하여 저정도면 된다&amp;quot;를 의미하는 것 같습니다.
설치 방법은 두가지로 나뉩니다.
 테스트를 목적으로 Helm Chart를 통한 설치 실제로 사용할 목적으로 halyard를 통한 설치  저는 여기서 2번 halyard를 통한 설치를 해보려고 합니다.</description>
    </item>
    
    <item>
      <title>Importance of Record</title>
      <link>http://kimmj.github.io/ibiza/importance-of-record/</link>
      <pubDate>Fri, 10 Jan 2020 00:47:03 +0900</pubDate>
      
      <guid>http://kimmj.github.io/ibiza/importance-of-record/</guid>
      <description>기록의 중요성 몇개월 전부터 Spinnaker라는 툴을 가지고 일을 하기 시작했다.
처음 halyard를 통해 deploy하기까지 꽤나 많은 시간을 소요했던 것으로 기억한다. 집에서 하는게 아니라 회사에서 구축을 해야했기 때문에, 프록시와 관련된 설정들이 너무나도 어려웠다. 특히 spinnaker의 docs가 제대로 되어있는 것도 아니기에, 문제가 하나 발생하면 이를 해결하는 데 너무나도 많은 시간이 걸렸다.
하지만 나의 최대 실수는 바로 기록하지 않은 것이다.
그렇게 많은 노력끝에 약 한달만에 첫 deploy를 할 수 있었는데, 이 때 했던 설정을 &amp;ldquo;나중에 정리해야지&amp;quot;라는 안일한 생각으로 지금까지 정리를 안하고 있었다.</description>
    </item>
    
    <item>
      <title>Install Kubeadm</title>
      <link>http://kimmj.github.io/kubernetes/installation/install-kubeadm/</link>
      <pubDate>Fri, 17 Jan 2020 00:38:41 +0900</pubDate>
      
      <guid>http://kimmj.github.io/kubernetes/installation/install-kubeadm/</guid>
      <description>kubeadm은 Kubernetes cluster의 설정들을 관리하는 툴입니다.
Prerequisites 먼저, 몇가지 전제사항이 있습니다.
  모든 노드의 MAC 주소와 product_uuid가 달라야 합니다. ifconfig -a와 sudo cat /sys/class/dmi/id/product_uuid를 통해 알 수 있습니다.
  network adapter를 확인합니다. 하나 이상의 network adapter가 있고, Kubernetes component들이 default route로 통신이 불가능하다면 IP route를 설정하여 Kubernetes cluster 주소가 적절한 adapter를 통해 이동할 수 있도록 해주는 것이 좋습니다.
  iptables를 사용하는지 확인 Ubuntu 19.04 이후버전부터는 nftables라는 것을 사용한다고 합니다.</description>
    </item>
    
    <item>
      <title>Install Halyard</title>
      <link>http://kimmj.github.io/spinnaker/installation/install-halyard/</link>
      <pubDate>Sat, 11 Jan 2020 01:41:08 +0900</pubDate>
      
      <guid>http://kimmj.github.io/spinnaker/installation/install-halyard/</guid>
      <description>halyard란? halyard는 Spinnaker를 배포할 때 사용하는 CLI 툴입니다.
halyard는 Spinnaker 관련 설정들의 validation, 배포한 환경 백업, 설정 추가 및 변경에 사용됩니다.
설치 방법 선택하기 총 2가지 방법으로 halyard를 설치할 수 있습니다.
 Debian/Ubuntu나 macOS에 직접 설치하기 Docker 사용하기  Spinnaker Docs에서는 실제 Production 환경이라면 직접 설치하는 방법을, 그게 아니라 간단하게 사용하려면 docker를 사용해도 된다고 하고 있습니다.
그리고 한가지의 옵션이 더 있습니다.
 인터넷이 되지 않는 환경 (프록시나 방화벽 등으로 halyard를 통한 설치가 어려운 경우)  이 글을 작성하고 있는 환경은 인터넷이 잘 되는 환경입니다.</description>
    </item>
    
    <item>
      <title>2020 Plan</title>
      <link>http://kimmj.github.io/ibiza/2020-plan/</link>
      <pubDate>Wed, 08 Jan 2020 01:51:18 +0900</pubDate>
      
      <guid>http://kimmj.github.io/ibiza/2020-plan/</guid>
      <description>2020 새해에는 몇가지 목표가 있다.
 꾸준하게 이 블로그 운영하기 꾸준하게 영어공부 하기 (쉐도잉) 꾸준하게 운동하기 나만의 hugo blog 만들기 적금으로 목돈만들기 개인 공부 많이 하기 CKA 취득  적다보니 너무 많아진 감이 없지않아 있지만, 올해는 자기계발을 많이 할 수 있는 한해가 되었으면 한다.
특히 지금은 누군가가 만든 블로그 테마를 사용하고 있지만 나중에는 내가 원하는 대로 커스터마이징이 가능하도록 나만의 블로그 테마를 만들고 싶다.
이를 위해서는 무엇이 필요한지도, 어떤 기술 스택을 쌓아야 할지도 모르지만 일단 도전해보고자 한다.</description>
    </item>
    
    <item>
      <title>Choose Cloud Providers</title>
      <link>http://kimmj.github.io/spinnaker/installation/choose-cloud-providers/</link>
      <pubDate>Sun, 19 Jan 2020 00:32:21 +0900</pubDate>
      
      <guid>http://kimmj.github.io/spinnaker/installation/choose-cloud-providers/</guid>
      <description>Spinnaker를 배포할 환경을 설정해 주어야 합니다. 여기에서는 제가 구축한 local kubernetes cluster를 사용할 것입니다.
먼저 2가지가 필요합니다.
 kubeconfig 파일 kubeconfig 파일은 일반적으로 ~$HOME/.kube/config 파일을 의미합니다. 저는 local kubernetes cluster로 이동하여 해당 파일을 halyard를 위한 vm으로 복사하였습니다. kubectl CLI 툴  이제 hal config 명령어를 통해 kubernetes cluster를 추가합니다.
hal config provider kubernetes enable CONTEXT=$(kubectl config current-context) hal config provider kubernetes account add wonderland \  --provider-version v2 \  --context $CONTEXT hal config features edit --artifacts true </description>
    </item>
    
    <item>
      <title>Create a Single Control Plane Cluster With Kubeadm</title>
      <link>http://kimmj.github.io/kubernetes/installation/create-a-single-control-plane-cluster-with-kubeadm/</link>
      <pubDate>Sat, 18 Jan 2020 22:27:39 +0900</pubDate>
      
      <guid>http://kimmj.github.io/kubernetes/installation/create-a-single-control-plane-cluster-with-kubeadm/</guid>
      <description>이 문서에서는 Master 노드 한대로 클러스터를 구성하는 방법에 대해 알아보도록 하겠습니다.
먼저, 파드 네트워크에 사용할 add-on을 선정합니다. 그런뒤 kubeadm init을 할 때 필요로 하는 사항이 있는지 확인해야 합니다.
저는 Calico를 사용할 것입니다. Calico는 kubeadm init에서 --pod-network-cidr=192.168.0.0/16을 해주거나, 나중에 calico.yml 파일에서 적절하게 수정해주어야 한다고 합니다. 저는 Pod Network에 사용될 IP 대역을 10.1.0.0/16 대역을 사용하고자 합니다. 그러기 위해 kubeadm init을 --pod-network-cidr=10.1.0.0/16 옵션을 통해 실행할 것입니다.
kubeadm init --pod-network-cidr=10.1.0.0/16 몇분 후 설치가 완료될 것입니다.</description>
    </item>
    
    <item>
      <title>Ibiza Project</title>
      <link>http://kimmj.github.io/ibiza/ibiza-project/</link>
      <pubDate>Wed, 08 Jan 2020 01:50:49 +0900</pubDate>
      
      <guid>http://kimmj.github.io/ibiza/ibiza-project/</guid>
      <description>Ibiza Project는 나만의 블로그을 만들기 위한 프로젝트이다.
기본적으로 hugo-theme-learn에서 시작하여, 나의 커스텀 파일들을 추가하여 내가 원하는 사이트를 만들 것이다.
기간 : 2020.4.15 (작성일 기준 + 100일)</description>
    </item>
    
    <item>
      <title>2020 New Year Holiday Plans</title>
      <link>http://kimmj.github.io/ibiza/2020-new-year-holiday-plans/</link>
      <pubDate>Wed, 22 Jan 2020 00:34:37 +0900</pubDate>
      
      <guid>http://kimmj.github.io/ibiza/2020-new-year-holiday-plans/</guid>
      <description>설 연휴 계획 date : 2020-01-22T00:34:37+09:00
- [ ] 연돈 가보기
  블로그에 댓글기능 추가하기
  블로그 레이아웃 구성
 왼쪽 사이드바를 더 넓게.  - [ ] 오른쪽 여백 생성하여 가운데 정렬이 되도록
- [ ] 배경 설정?
 폴더 구분지을 prefix 추가 active 상태인 폴더는 다른 prefix로 임시 변경    연휴에도 할일 다 하기
  Kubernetes localization 확인하기
  </description>
    </item>
    
    <item>
      <title>Choose Your Environment</title>
      <link>http://kimmj.github.io/spinnaker/installation/choose-your-environment/</link>
      <pubDate>Sun, 19 Jan 2020 00:42:56 +0900</pubDate>
      
      <guid>http://kimmj.github.io/spinnaker/installation/choose-your-environment/</guid>
      <description>Spinnaker를 배포하는 방법에는 3가지가 있습니다. Kubernetes 환경에 배포하기, local debian으로 배포하기, local git으로 배포하기가 있습니다.
여기에서는 Kubernetes 환경에 배포하기를 진행할 것입니다.
ACCOUNT=wonderland hal config deploy edit --type distributed --account-name $ACCOUNT 위와같이 설정하면 됩니다. ACCOUNT는 kubernetes cluster를 추가할 때 사용했던 이름을 사용하면 됩니다.</description>
    </item>
    
    <item>
      <title>Choose a Storage Service</title>
      <link>http://kimmj.github.io/spinnaker/installation/choose-a-storage-service/</link>
      <pubDate>Sun, 19 Jan 2020 00:46:44 +0900</pubDate>
      
      <guid>http://kimmj.github.io/spinnaker/installation/choose-a-storage-service/</guid>
      <description>Spinnaker들의 데이터를 저장할 공간입니다.
여러가지 옵션들이 있지만, 저는 local로 운용할 수 있는 minio를 통해 데이터를 저장해 볼 것입니다.
minio를 docker-compose를 통해 쉽게 배포하도록 할 것입니다. 먼저, docker-compose를 설치합니다.
sudo curl -L &amp;#34;https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)&amp;#34; -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose 그 뒤 minio의 docker-compose.yaml을 만듭니다.
version: &#39;3.7&#39; services: minio: image: minio/minio:RELEASE.2020-01-16T22-40-29Z volumes: - ./data:/data ports: - &amp;quot;9000:9000&amp;quot; environment: MINIO_ACCESS_KEY: minio MINIO_SECRET_KEY: minio123 command: server /data healthcheck: test: [&amp;quot;CMD&amp;quot;, &amp;quot;curl&amp;quot;, &amp;quot;-f&amp;quot;, &amp;quot;http://localhost:9000/minio/health/live&amp;quot;] interval: 30s timeout: 20s retries: 3 docker-compose를 통해서 deamon으로 실행합니다.</description>
    </item>
    
    <item>
      <title>Episode5</title>
      <link>http://kimmj.github.io/english/himwm/season1/episode5/</link>
      <pubDate>Sat, 11 Jan 2020 00:03:30 +0900</pubDate>
      
      <guid>http://kimmj.github.io/english/himwm/season1/episode5/</guid>
      <description>Did I just have a stroke? 여기서 stroke은 뇌졸증이라고 해석할 수 있습니다. 이를 약간은 의역하자면 내가 뇌졸증에 걸렸나?보단 내 머리가 이상해졌나? 이정도로 생각해보면 될 것 같습니다.
All the things you do when you know where your next thousand lays are coming from. 이 말 앞에는 마샬, 릴리가 약혼 후에 더욱 성숙해지고자 북클럽에 가입하고, 와인파티를 한다는 내용이 있습니다. 여기서 바니가 위의 대사를 하는데 이러한 것들(성숙해지고자 하는 행동들)은 where your next thousand lays are coming from을 알때나 하는 행동이라는 뜻입니다.</description>
    </item>
    
    <item>
      <title>Deploy and Connect</title>
      <link>http://kimmj.github.io/spinnaker/installation/deploy-and-connect/</link>
      <pubDate>Sun, 19 Jan 2020 01:20:12 +0900</pubDate>
      
      <guid>http://kimmj.github.io/spinnaker/installation/deploy-and-connect/</guid>
      <description>드디어 마지막 절차입니다.
먼저 어떤 버전을 설치할지 확인후 설정합니다.
hal version list 작성 기준으로 최신 버전이 1.17.6이므로 이를 설정합니다.
hal config version edit --version 1.17.6 halyard를 NodePort로 노출시키기 위해 api와 ui에 base url을 부여합니다.
hal config security ui edit --override-base-url http://192.168.8.22:30100 hal config security api edit --override-base-url http://192.168.8.22:30200 이제 본격적으로 deploy를 하도록 합니다.
hal deploy apply 그 후 Spinnaker를 NodePort로 서비스합니다.
kubectl patch svc spin-deck -n spinnaker --type=&amp;#39;json&amp;#39; -p &amp;#39;[{&amp;#34;op&amp;#34;:&amp;#34;replace&amp;#34;,&amp;#34;path&amp;#34;:&amp;#34;/spec/type&amp;#34;,&amp;#34;value&amp;#34;:&amp;#34;NodePort&amp;#34;}]&amp;#39; kubectl patch svc spin-gate -n spinnaker --type=&amp;#39;json&amp;#39; -p &amp;#39;[{&amp;#34;op&amp;#34;:&amp;#34;replace&amp;#34;,&amp;#34;path&amp;#34;:&amp;#34;/spec/type&amp;#34;,&amp;#34;value&amp;#34;:&amp;#34;NodePort&amp;#34;}]&amp;#39; kubectl patch svc spin-deck -n spinnaker --type=&amp;#39;json&amp;#39; -p &amp;#39;[{&amp;#34;op&amp;#34;:&amp;#34;replace&amp;#34;,&amp;#34;path&amp;#34;:&amp;#34;/spec/ports/0/nodePort&amp;#34;,&amp;#34;value&amp;#34;: 30100}]&amp;#39; kubectl patch svc spin-gate -n spinnaker --type=&amp;#39;json&amp;#39; -p &amp;#39;[{&amp;#34;op&amp;#34;:&amp;#34;replace&amp;#34;,&amp;#34;path&amp;#34;:&amp;#34;/spec/ports/0/nodePort&amp;#34;,&amp;#34;value&amp;#34;: 30200}]&amp;#39; 이제 Spinnaker로 접속하여 확인합니다.</description>
    </item>
    
    <item>
      <title>Episode6</title>
      <link>http://kimmj.github.io/english/himwm/season1/episode6/</link>
      <pubDate>Mon, 13 Jan 2020 01:27:04 +0900</pubDate>
      
      <guid>http://kimmj.github.io/english/himwm/season1/episode6/</guid>
      <description>Do they rule? They rule.
It&#39;s the one night of the year chicks use to unleash their inner ho-bag
trot out your new fella
It was carve3d in strategic places
She could be engaged, or married, or, God forbid, fat
Oh, yeah. Weirdly hor, right?
What are you going as? Oh, like I evend need to ask.
What? She thought it was hilarious
What a sad commentary on our national attention span, that we could forget such a turbulent time in our political history</description>
    </item>
    
    <item>
      <title>Install in Air Gaped Environment</title>
      <link>http://kimmj.github.io/spinnaker/installation/install-in-air-gaped-environment/</link>
      <pubDate>Mon, 20 Jan 2020 01:16:52 +0900</pubDate>
      
      <guid>http://kimmj.github.io/spinnaker/installation/install-in-air-gaped-environment/</guid>
      <description>이번에는 인터넷이 되지 않는 환경에서 어떻게 Spinnaker를 설치하는지에 대해 알아보도록 하겠습니다.
먼저 halyard에서 언제 인터넷과 통신하는지를 대강 추려보도록 하겠습니다.
 Spinnaker의 version.yaml을 불러와서 최신의 halyard 버전과 최신 Spinnaker의 버전들을 보여줍니다.  gs://halconfig/version.yml   설치하고자 하는 Spinnaker의 버전을 선택하면, 그에 따른 배포에 필요한 yaml들을 불러옵니다.  gs://halconfig/bom/VERSION.yml gs://halconfig/MICRO_SERVICE/TAG.yml   deploy를 하기 위해 Google Cloud Repository에서 이미지를 가지고 옵니다.  gcr.io/spinnaker-marketplace/SERVICE   마지막으로 dependency가 있는 몇가지 서비스를 Google Cloud Repository에서 가지고옵니다.</description>
    </item>
    
    <item>
      <title>Episode7</title>
      <link>http://kimmj.github.io/english/himwm/season1/episode7/</link>
      <pubDate>Tue, 14 Jan 2020 00:53:23 +0900</pubDate>
      
      <guid>http://kimmj.github.io/english/himwm/season1/episode7/</guid>
      <description>Yeah, we do that behind you back.
You&#39;re messing with me, right?
Summer Breeze is my guilty-pleasure song.
Well, by some million-to-one long shot, and I&#39;m not rooting for this, you wind up not getting married this weekend, give me a call
Brace yourself, dude.</description>
    </item>
    
    <item>
      <title>Episode8</title>
      <link>http://kimmj.github.io/english/himwm/season1/episode8/</link>
      <pubDate>Wed, 15 Jan 2020 01:41:53 +0900</pubDate>
      
      <guid>http://kimmj.github.io/english/himwm/season1/episode8/</guid>
      <description>You&#39;re making this up.
Never even saw the bus.
Just keep your eyes open.
But this girl, she wants the same stuff, and it&#39;s bumming me out.
But in the meantime, wish me luck.
May lead to an argument, but we&#39;re settling this.
Is this a discussion of the degree to which you stabbed me?</description>
    </item>
    
    <item>
      <title>Episode9</title>
      <link>http://kimmj.github.io/english/himwm/season1/episode9/</link>
      <pubDate>Wed, 15 Jan 2020 23:58:54 +0900</pubDate>
      
      <guid>http://kimmj.github.io/english/himwm/season1/episode9/</guid>
      <description>Okay, Lily, we&#39;re putting you on salad duty.
Why are we even talking about this? This is, like, way down the road.
All is right with the world again.
Look, I don&#39;t wanna be exactly like my family. And don&#39;t take this the wrong way, but I don&#39;t wanna be exactly like your family, either.
Just a little joke to lighten up the mood.</description>
    </item>
    
    <item>
      <title>Hugo에 Comment 추가하기 (Utterance)</title>
      <link>http://kimmj.github.io/hugo/insert-comment/</link>
      <pubDate>Fri, 24 Jan 2020 20:56:47 +0900</pubDate>
      
      <guid>http://kimmj.github.io/hugo/insert-comment/</guid>
      <description>댓글 서비스 선택 블로그를 운영하는데 관심을 가지기 시작하면서, 기본적으로 jekyll이나 hugo에는 댓글 기능이 없다는 것을 알게 되었습니다. static site를 만드는데 사실 댓글을 지원한다는게 이상한 상황이긴 하지요. 그래도 서드파티의 지원을 받으면 댓글 기능이 가능해집니다. 여러 블로그들을 탐방하며 git page 기능을 사용하는 블로그들에도 댓글이 있는것을 항상 봐왔으니까요.
따라서 댓글을 어떻게 사용하는지 검색해보게 되었습니다. 대표적인 것이 Disqus 입니다. 실제로 많은 사이트들이 Disqus를 기반으로 댓글 기능을 사용합니다.
저는 이 hugo 기반 블로그를 만드는 데 큰 도움을 준 https://ryan-han.</description>
    </item>
    
    <item>
      <title>Tmux</title>
      <link>http://kimmj.github.io/ubuntu/tools/tmux/</link>
      <pubDate>Thu, 23 Jan 2020 21:04:29 +0900</pubDate>
      
      <guid>http://kimmj.github.io/ubuntu/tools/tmux/</guid>
      <description>tmux란? tmux는 하나의 화면에서 여러개의 터미널을 키고싶을 때 사용하는 프로그램으로, ubuntu를 설치하면 기본적으로 설치되는 프로그램입니다.
다음과 같은 구조를 가집니다.
tmux ├── session │ ├── windows │ │ ├── pane │ │ └── pane │ └── windows │ ├── pane │ └── pane └── session ├── windows │ ├── pane │ └── pane └── windows ├── pane └── pane session 사용법 먼저 가장 큰 단위인 session을 다루는 방법부터 시작해보도록 하겠습니다.
session 생성 tmux 위처럼 tmux를 생성할 수 있습니다.</description>
    </item>
    
    <item>
      <title>Federation</title>
      <link>http://kimmj.github.io/prometheus/federation/</link>
      <pubDate>Tue, 21 Jan 2020 23:34:44 +0900</pubDate>
      
      <guid>http://kimmj.github.io/prometheus/federation/</guid>
      <description>What is Federation? 영어 의미 그대로는 &amp;ldquo;연합&amp;quot;이라는 뜻입니다. 즉, Prometheus의 Federation은 여러개의 Prometheus에서 Metric을 가져와 계층구조를 만드는 것을 의미합니다.
위의 그림에서 너무나도 잘 표현이 되어 있습니다. 그림에서 보시면 상위에 있는 Prometheus에서 하위의 Dev, Staging, Production쪽으로 화살표가 간 것을 볼 수 있습니다. 이는 아래에 있는 Prometheus가 http(s)://&amp;lt;url&amp;gt;/federation으로 보여주는 Metric들을 위쪽에 있는 Prometheus에서 scrape하기 때문입니다.
저의 상황을 설명해드리고 지나가도록 하겠습니다. 저는 Kubernetes Cluster가 Dev(Canary), Staging, Production과 비슷하게 3개 있었습니다. 여기서 Spinnaker를 통해 Dev에 새로운 이미지들을 배포할 것이고, 이에 대한 Metric을 Canary Analysis를 통해 분석하여 Dev로 배포된 이미지가 이전 Staging의 이미지와 어떻게 다른지 등을 점수화하여 Staging 서버에 배포를 할지 말지 결정하도록 해야하는 상황이었습니다.</description>
    </item>
    
    <item>
      <title>Canary Analysis</title>
      <link>http://kimmj.github.io/spinnaker/canaryanalysis/canary-analysis/</link>
      <pubDate>Tue, 21 Jan 2020 01:08:00 +0900</pubDate>
      
      <guid>http://kimmj.github.io/spinnaker/canaryanalysis/canary-analysis/</guid>
      <description>Spinnaker Canary Analysis Spinnaker에는 Canary Analysis라는 자동 분석 도구가 있습니다. Kayenta라는 micro service를 사용하는데, 이를 통해 자동으로 canary deploy가 괜찮은 버전인지를 확인해 줍니다.
그러나 이 툴은 Spinnaker에서 사용하기에 여간 어려운 것이 아닙니다. 제일 먼저 봉착하는 난관은 바로 &amp;ldquo;어떻게 Canary Analysis를 활성화 하는가?&amp;ldquo;입니다.
이곳에 방법이 나와있지만, 사실 저도 엄청 많이 헤멨습니다. 저는 bare-metal 환경에서 Kubernetes cluster를 구축하였었고, aws나 azure, gcp는 사용하지 못하는 상황었습니다. (물론 지금도 집에서 VM으로 로컬에 구성하였지만, cloud platform은 언제나 과금때문에 꺼려지게 됩니다.</description>
    </item>
    
    <item>
      <title>Episode10</title>
      <link>http://kimmj.github.io/english/himwm/season1/episode10/</link>
      <pubDate>Fri, 17 Jan 2020 00:06:57 +0900</pubDate>
      
      <guid>http://kimmj.github.io/english/himwm/season1/episode10/</guid>
      <description>Hey, it&#39;s on the hous.
Ted, as your mentor and spiritual guide, I forbid you from calling her.
Sleep it off, bro.
This way, if you pass out in the gutter someone with call me, and I will come get you.
Why do they call it &amp;lsquo;karaoke,&amp;rsquo; anyhow?
You&#39;ve moved on. I&#39;ve moved on.</description>
    </item>
    
    <item>
      <title>Change Hostname</title>
      <link>http://kimmj.github.io/ubuntu/change-hostname/</link>
      <pubDate>Tue, 14 Jan 2020 01:00:02 +0900</pubDate>
      
      <guid>http://kimmj.github.io/ubuntu/change-hostname/</guid>
      <description>hostname을 바꾸는 일은 흔치 않지만 최초 셋업할 때 많이 사용하곤 합니다.
# hostnamectl set-hostname &amp;lt;host name&amp;gt; hostnamectl set-hostname wonderland 변경 후 터미널을 끄고 재접속을 하면 변경된 사항을 볼 수 있습니다.
hostname </description>
    </item>
    
    <item>
      <title>Font Change</title>
      <link>http://kimmj.github.io/hugo/ibiza/font-change/</link>
      <pubDate>Sun, 12 Jan 2020 16:28:31 +0900</pubDate>
      
      <guid>http://kimmj.github.io/hugo/ibiza/font-change/</guid>
      <description>Ibiza 프로젝트를 진행하는데 폰트가 마음에 들지 않았습니다. 따라서 저는 폰트를 변경하기로 마음먹었습니다.
먼저, 폰트 설정을 어디서 하는지 알아낼 필요가 있었습니다.
find . | grep font 결과를 보니, theme 폴더 안에 제가 사용하는 hugo-theme-learn 테마에서 static/fonts/ 폴더에 폰트들을 저장해두고 있었습니다. 그렇다면 어느 파일에서 어떤 폰트를 사용한다고 설정할까요?
hugo-theme-learn폴더로 이동하여 어디에 사용되는지 확인해보았습니다.
grep -ri &amp;#34;font&amp;#34; 결과가 길게 나오는데요, 여기서 static/css/theme.css 안에 폰트에 대한 설정을 한 것이 보였습니다. 그 파일을 보니, @font-face라는 설정이 보이네요.</description>
    </item>
    
    <item>
      <title>HUGO로 HTML이 되지 않을 때 가능하게 하는 방법</title>
      <link>http://kimmj.github.io/hugo/hugo-with-html/</link>
      <pubDate>Fri, 10 Jan 2020 02:22:34 +0900</pubDate>
      
      <guid>http://kimmj.github.io/hugo/hugo-with-html/</guid>
      <description>Hugo는 markdown을 기본적으로 사용하지만 html을 이용해서 좀 더 다양하게 커스터마이징이 가능한 장점도 가지고 있습니다.
하지만 저는 처음에 html 코드를 사용하게 되면 &amp;lt;!-- raw HTML omitted --&amp;gt;와 같은 줄로 대치가 되곤 했습니다. 구글링 결과 이는 Hugo의 버전이 0.60.0으로 되면서부터 기본적으로 disable 시켰기 때문입니다.
따라서 다음과 같이 조치를 하면 간단하게 해결이 가능합니다.
[markup.goldmark.renderer] unsafe= true 위와 같은 설정을 config.toml에 추가하기만 하면 됩니다. 추가를 한 뒤 다시 확인해보면 정상적으로 html 코드가 적용된 모습을 볼 수 있습니다.</description>
    </item>
    
    <item>
      <title>Pipeline Expressions</title>
      <link>http://kimmj.github.io/spinnaker/tips/pipeline-expressions/</link>
      <pubDate>Fri, 10 Jan 2020 01:33:32 +0900</pubDate>
      
      <guid>http://kimmj.github.io/spinnaker/tips/pipeline-expressions/</guid>
      <description>Spinnaker는 배포를 자동화할 때 사용합니다. 그렇기 때문에 자동화를 위해선 다른 곳에서 사용된 값들을 가지고 와야할 필요성이 생기기도 합니다.
이 문서에서는 그럴 때 사용할 수 있는 pipeline function에 대해 알아보도록 하겠습니다.
pipeline에서 다른 pipeline의 값들 불러오기 Note: Pipeline expression syntax is based on Spring Expression Language (SpEL).
 위의 Note에도 적었듯이, Spinnaker는 SpEL을 기반으로 Expressions를 사용합니다. SpEL에 대해 이미 잘 알고있다면 너무나도 좋겠지만, 저는 익숙하지가 않았기 때문에 많은 시행착오를 거쳐서 습득을 하게 되었습니다.</description>
    </item>
    
    <item>
      <title>Create Vm With Ansible Libvirt</title>
      <link>http://kimmj.github.io/ansible/create-vm-with-ansible-libvirt/</link>
      <pubDate>Wed, 08 Jan 2020 01:52:47 +0900</pubDate>
      
      <guid>http://kimmj.github.io/ansible/create-vm-with-ansible-libvirt/</guid>
      <description>Ansible은 어떠한 프로세스를 자동화 할 때 사용할 수 있는 툴입니다. 그리고 libvirt는 linux 환경에서 qemu를 이용하여 VM을 생성할 때 사용하는 python 모듈입니다.
이 두가지를 합하여 Ansible을 통해 VM을 생성하는 방법에 대해 알아보도록 하겠습니다.
ansible-role-libvirt-vm 참조 Github : https://github.com/stackhpc/ansible-role-libvirt-vm
위의 Github 프로젝트는 libvirt를 ansible에서 사용할 수 있도록 만든 오픈소스입니다. 이를 이용하여 ansible-playbook을 통해 VM을 생성해 볼 것입니다.
이를 로컬에 clone 합니다.
git clone https://github.com/stackhpc/ansible-role-libvirt-vm 테스트 환경 저는 Ubuntu 18.04.3 Desktop을 사용하고 있습니다.</description>
    </item>
    
    <item>
      <title>Unattended Ubuntu</title>
      <link>http://kimmj.github.io/ubuntu/unattended-ubuntu/</link>
      <pubDate>Wed, 08 Jan 2020 01:52:32 +0900</pubDate>
      
      <guid>http://kimmj.github.io/ubuntu/unattended-ubuntu/</guid>
      <description>어디에 좋을까 Ubuntu Server를 설치하기 위해서는 많은 추가 입력이 있어야 합니다. 사용자가 어떻게 설치하기를 원하는지 모르기 때문에, 또 다양한 옵션을 사용자가 선택하기 위해서는 어찌보면 당연한 것이겠지요. 하지만 만약 똑같은 설정을 사용할 것인데, 여러대의 서버에 OS를 설치하는 상황이라고 생각해보면 정말 암울합니다. 온전히 시간을 OS 설치에만 투자하자니 이건 간단한 업무로 인해 다른 업무를 보지 못하게 됩니다. 또 다른 업무와 동시에 하자니 다음 입력창이 뜰 때인지 한번씩 확인해 주어야 합니다.
따라서 어차피 같은 설정을 한다면, 이러한 설정을 미리 해 놓는 방법이 Ubuntu iso 파일 내부에 있을 것이라고 추측했습니다.</description>
    </item>
    
    <item>
      <title>How to Edit Boot Parameter During Install</title>
      <link>http://kimmj.github.io/ubuntu/how-to-edit-boot-parameter-during-install/</link>
      <pubDate>Wed, 08 Jan 2020 01:52:12 +0900</pubDate>
      
      <guid>http://kimmj.github.io/ubuntu/how-to-edit-boot-parameter-during-install/</guid>
      <description>Ubuntu 설치할 때 boot parameter가 필요한 상황이 간혹 발생할 수 있습니다.
특히 저의 경우, preseed.cfg를 수정하기 위해 인스톨러가 질의하는 것이 preseed.cfg의 어떤것과 대응이 되는지를 보기 위해 DEBCONF_DEBUG=5라는 옵션을 boot parameter로 주어야 했습니다. 이 때 사용할 수 있는 방법을 소개드립니다.
먼저 평소와 같이 ubuntu를 설치하기 위해 설치 이미지를 삽입합니다. 그 다음에는 언어를 선택하시면, 다음으로 넘어가기 전에 메뉴가 뜹니다.
이 상태에서 F6을 누르시면 옵션을 선택할 수 있고, 이 때 ESC키를 누르면 boot parameter가 하단에 보일 것입니다.</description>
    </item>
    
    <item>
      <title>How to Use Sudo Without Password</title>
      <link>http://kimmj.github.io/ubuntu/how-to-use-sudo-without-password/</link>
      <pubDate>Wed, 08 Jan 2020 01:51:54 +0900</pubDate>
      
      <guid>http://kimmj.github.io/ubuntu/how-to-use-sudo-without-password/</guid>
      <description>/etc/sudoers는 sudo를 사용할 수 있는 파일입니다. 이 파일을 열어보면 다음과 같은 글이 적혀 있습니다.
 Please consider adding local content in /etc/sudoers.d/ instead of directly modifying this file
 즉, 직접 이 파일을 수정해서 sudo 권한을 주지 말고, /etc/sudoers.d/ 폴더 내에 파일을 추가하라는 의미입니다.
이 곳에는 /etc/sudoers와 마찬가지로 계정에 대한 설정을 추가할 수 있습니다. 그리고 /etc/sudoers에서는 &amp;ldquo;NOPASSWD&amp;quot;라는 옵션을 주어 password없이 타 계정의 권한을 가지게 만들 수 있습니다.
이 두가지를 종합하여 내 linux 계정이 sudo 명령어를 입력할 때, 즉 root 권한을 가지게 될 때 password를 입력하지 않도록 설정할 수 있습니다.</description>
    </item>
    
    <item>
      <title>Episode11</title>
      <link>http://kimmj.github.io/english/himwm/season1/episode11/</link>
      <pubDate>Sat, 18 Jan 2020 19:44:05 +0900</pubDate>
      
      <guid>http://kimmj.github.io/english/himwm/season1/episode11/</guid>
      <description>She seems like she might be into me.
I&#39;ve moved up in the world.
Oh, well, my word.
Can we swing by the aprtment so I can change?
Ted, Derek stood me up.
What are the odds?
Oh, nuts.
Give it a rest, Ted.</description>
    </item>
    
    <item>
      <title>Episode12</title>
      <link>http://kimmj.github.io/english/himwm/season1/episode12/</link>
      <pubDate>Mon, 20 Jan 2020 01:13:47 +0900</pubDate>
      
      <guid>http://kimmj.github.io/english/himwm/season1/episode12/</guid>
      <description>We never really clicked.
Tehy were buried in a shallow grave.
I&#39;m just saying that it&#39;s my wedding, too, and I should have a say in it.
Did you see how fired up she was?</description>
    </item>
    
    <item>
      <title>Episode13</title>
      <link>http://kimmj.github.io/english/himwm/season1/episode13/</link>
      <pubDate>Tue, 21 Jan 2020 00:17:34 +0900</pubDate>
      
      <guid>http://kimmj.github.io/english/himwm/season1/episode13/</guid>
      <description>It was her big break.
Like just now, when I saw you doing the Chicken Dance out there, I&#39;m not gonna lie to you, big time thunderbolt.
Robin, care to chime in with anything?
You know, there&#39;s one little flaw in our plan.</description>
    </item>
    
    <item>
      <title>Episode14</title>
      <link>http://kimmj.github.io/english/himwm/season1/episode14/</link>
      <pubDate>Tue, 21 Jan 2020 23:25:30 +0900</pubDate>
      
      <guid>http://kimmj.github.io/english/himwm/season1/episode14/</guid>
      <description>Awkward conversations with middle-aged couples trying to stave off divorce.
That snuck up on me.
I mean, the whole point was not to rush into this.
Honey, Ted has been going out of his mind waiting for this.</description>
    </item>
    
    <item>
      <title>Episode15</title>
      <link>http://kimmj.github.io/english/himwm/season1/episode15/</link>
      <pubDate>Wed, 29 Jan 2020 01:33:51 +0900</pubDate>
      
      <guid>http://kimmj.github.io/english/himwm/season1/episode15/</guid>
      <description>I am smelling dirt.
You guys will pick it up.
Prude-alert.
Slut-alert.
Whatevs.
As long as you&#39;re nailing that.
Listen to you.
And FYI, Shannon and I have decided to wait till we&#39;re married.
Way to step up.
My saga continues.
You let me dodge a bullet, Big Guy.</description>
    </item>
    
    <item>
      <title>Episode16</title>
      <link>http://kimmj.github.io/english/himwm/season1/episode16/</link>
      <pubDate>Thu, 30 Jan 2020 00:14:51 +0900</pubDate>
      
      <guid>http://kimmj.github.io/english/himwm/season1/episode16/</guid>
      <description>I&#39;m flat broke.
We bust on each other.
It&#39;s a date.
Where does she get off?
Stop being sarcastic.</description>
    </item>
    
  </channel>
</rss>