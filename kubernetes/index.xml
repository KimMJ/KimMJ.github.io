<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubernetes on Ibiza</title>
    <link>http://kimmj.github.io/kubernetes/</link>
    <description>Recent content in Kubernetes on Ibiza</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 12 Jan 2020 23:53:35 +0900</lastBuildDate>
    
	<atom:link href="http://kimmj.github.io/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[번역] 쿠버네티스에서의 Port, TargetPort, NodePort</title>
      <link>http://kimmj.github.io/kubernetes/port-targetport-nodeport-in-kubernetes/</link>
      <pubDate>Sun, 15 Mar 2020 23:13:37 +0900</pubDate>
      
      <guid>http://kimmj.github.io/kubernetes/port-targetport-nodeport-in-kubernetes/</guid>
      <description>원문: https://matthewpalmer.net/kubernetes-app-developer/articles/kubernetes-ports-targetport-nodeport-service.html
쿠버네티스의 port declaration 필드에는 여러가지가 있다. 각 type에 대해 빠르게 살펴보고 YAML에서 각각 어떤 의미를 가지고 있는지 알아보도록 하자.
Pod ports list pod.spec.containers[].ports로 정의된 이 배열은 container가 노출하고 있는 포트의 리스트를 나타낸다. 이 리스트를 꼭 작성해야할 필요는 없다. 리스트가 비어있다고 하더라도 container가 포트를 listening하고 있는 한 여전히 네트워크 접속이 가능하다. 이는 단순히 쿠버네티스에게 추가적인 정보를 줄 뿐이다.
 List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational.</description>
    </item>
    
    <item>
      <title>Stern을 이용하여 여러 pod의 log를 한번에 확인하기</title>
      <link>http://kimmj.github.io/kubernetes/stern/</link>
      <pubDate>Mon, 24 Feb 2020 23:28:01 +0900</pubDate>
      
      <guid>http://kimmj.github.io/kubernetes/stern/</guid>
      <description>Kubernetes에서의 trouble shooting kubernetes 환경에서 어떤 문제가 발생하면 다음과 같은 flow로 확인을 해보면 됩니다.
 kubectl get pods -o yaml로 yaml을 확인하기 kubectl describe pods로 pod에 대한 설명 확인하기 kubectl describe deployments(statefulset, daemonset)으로 확인하기 kubectl logs로 로그 확인하기  보통 kubernetes 리소스의 부족과 같은 kubernetes단의 문제는 1~3을 확인하면 전부 문제점을 찾을 수 있습니다. 그러나 어플리케이션의 직접적인 원인을 알아보기 위해서는 log를 확인해야 합니다.
하지만 kubectl의 logs에는 한가지 한계점이 있는데, 바로 단일 container에 대해서만 log 확인이 가능하다는 점입니다.</description>
    </item>
    
  </channel>
</rss>