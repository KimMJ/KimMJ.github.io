<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ansible-for-devops on Ibiza</title>
    <link>http://kimmj.github.io/tags/ansible-for-devops/</link>
    <description>Recent content in ansible-for-devops on Ibiza</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 12 Mar 2020 20:17:20 +0900</lastBuildDate>
    
	<atom:link href="http://kimmj.github.io/tags/ansible-for-devops/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ansible Playbooks Beyond the Basics</title>
      <link>http://kimmj.github.io/ansible/ansible-for-devops/chapter5/ansible-playbooks-beyond-the-basics/</link>
      <pubDate>Fri, 28 Feb 2020 11:06:02 +0900</pubDate>
      
      <guid>http://kimmj.github.io/ansible/ansible-for-devops/chapter5/ansible-playbooks-beyond-the-basics/</guid>
      <description>playbook과 우리가 이전에 사용한 간단한 playbook organization은 많은 일반적인 use case를 커버할 수 있다. system administration이 필요로 하는 폭에 대해 얘기하자면 Ansible에는 우리가 알아야 할 수많은 기능들이 있다. 우리는 play를 어떻게 더 세분화하여 실행하는지, simplicity와 usability를 위해 어떻게 task와 playbook을 구성하는지, infrastructure를 더 자신있게 다룰 수 있도록 해주는 다른 advanced playbook topic에 대해 다루어 볼 것이다.</description>
    </item>
    
    <item>
      <title>Handover</title>
      <link>http://kimmj.github.io/ansible/ansible-for-devops/chapter5/handover/</link>
      <pubDate>Sun, 01 Mar 2020 00:22:17 +0900</pubDate>
      
      <guid>http://kimmj.github.io/ansible/ansible-for-devops/chapter5/handover/</guid>
      <description>chapter 4에서 Ubuntu LAMP server 예제는 Apache를 재시작하는 간단한 handler를 사용하였고 Apache의 configuration에 영향을 주는 특정한 task들이 notify: restart apache라는 옵션으로 handler에게 noti를 줬었다.
handlers: - name: restart apache service: name=apache2 state=restarted tasks: - name: Enable Apache rewrite module apache2_module: name=rewrite state=present notify: restart apache 어떤 상황에서는 여러개의 handler에 notify를 해야할 상황이 있을 수도 있다. 또는 어떤 handler는 다른 추가적인 handler에게 notify를 해야할 수도 있다. 이 두가지 모두 Ansible에서는 쉽게 할 수 있다.</description>
    </item>
    
    <item>
      <title>Chapter 1 - Getting Started With Ansible</title>
      <link>http://kimmj.github.io/ansible/ansible-for-devops/getting-started-with-ansible/</link>
      <pubDate>Wed, 05 Feb 2020 01:41:13 +0900</pubDate>
      
      <guid>http://kimmj.github.io/ansible/ansible-for-devops/getting-started-with-ansible/</guid>
      <description>Ansible and Infrastructure Management On snowflakes1 and shell scripts 보통은 SSH를 통해서 접속하여 필요한 작업을 하고 접속을 종료한다. 이 때, 어떤 것들은 기록되고 어떤 것들은 기록되지 않는다. 결국 관리자가 똑같은 작업을 여러 서버에 해야하는 책임소지가 있다.
서버가 동작 중일 때 몇가지 변경사항이 생기고 적용할 방법이 쉽다면 문제가 되진 않을 것이다. 그러나 불행하게도 대부분은 그렇지 않다.
이 때 기존과 똑같은 서버를 만드려고 한다면 정말 많은, 쓸데없는 시간을 소비하게 된다.
shell script로 보완을 하려고 하지만, 모든 edge case를 커버하기란 어려운게 현실이다.</description>
    </item>
    
    <item>
      <title>Environment Variables</title>
      <link>http://kimmj.github.io/ansible/ansible-for-devops/chapter5/environment-variables/</link>
      <pubDate>Sun, 01 Mar 2020 18:43:27 +0900</pubDate>
      
      <guid>http://kimmj.github.io/ansible/ansible-for-devops/chapter5/environment-variables/</guid>
      <description>Ansible은 다양한 방법으로 environment variable을 사용할 수 있도록 해준다. 첫번째로 remote user account에 대해 어떤 environment variable을 설정하고자 한다면 remote user의 .bash_profile에 다음과 같이 추가하면 된다.
- name: Add an environment variable to the remote user&amp;#39;s shell lineinfile: dest=~/.bash_profile regexp=^ENV_VAR= line=ENV_VAR=value 그러면 다음에 실행되는 모든 task는 이 environment variable에 접근할 수 있다. (물론 shell module만 environment variable을 사용하는 shell command를 이해할 것이다!) environment variable을 나중 task에서 사용하려면 task의 register 옵션을 사용하여 environment variable을 variable에 저장하여 Ansible이 나중에 사용할 수 있도록 하는 것을 추천한다.</description>
    </item>
    
    <item>
      <title>Chapter 2 - Local Infrastructure Development: Ansible and Vagrant</title>
      <link>http://kimmj.github.io/ansible/ansible-for-devops/local-infrastructure-development-ansible-and-vagrant/</link>
      <pubDate>Wed, 05 Feb 2020 15:09:00 +0900</pubDate>
      
      <guid>http://kimmj.github.io/ansible/ansible-for-devops/local-infrastructure-development-ansible-and-vagrant/</guid>
      <description>Prototyping and testing with local virtual machines Ansible은 remote, local 가리지 않고 연결할 수 있는 서버면 모두 잘 동작한다. 일반적으로 테스트를 할 때, Ansible Playbook 개발 속도를 빠르게 하기 위해 로컬로 테스트한다. 로컬로 하는 것이 실제 환경에서 테스트하는 것보다 훨씬 안전하다.
최근 트렌드는 단연 TDD이다. 따라서 Infrastructure에도 테스트는 필요하다.
소프트웨어에 대한 변경사항은 수동 또는 자동적으로 이루어진다. 이러한 것들이 Ansible과 다른 개발, configuration management 툴과 함께 구현되어 테스트를 할 수 있도록 구현되어있다.</description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>http://kimmj.github.io/ansible/ansible-for-devops/chapter5/variables/</link>
      <pubDate>Sun, 08 Mar 2020 18:19:40 +0900</pubDate>
      
      <guid>http://kimmj.github.io/ansible/ansible-for-devops/chapter5/variables/</guid>
      <description>Ansible에서의 variable은 대부분의 다른 시스템에서의 variable과 비슷하다. variable은 항상 글자로 시작하고[A-Za-z] 그 다음부터는 _나 숫자들 [0-9]를 포함할 수 있다.
사용가능한 variable name은 foo, foo_bar, foo_bar_5, fooBar을 포함하지만 표준은 모두 소준자를 사용하고 variable name에서 숫자를 제거하는 것이다(camelCase나 UpperCamelCase를 피한다).
사용불가능한 variable name은 _foo, foo-bar, 5-foo-bar, foo bar가 있다.
inventory file에서 variable의 값은 equal sign으로 할당된다.
foo=bar playbook이나 파일에 포함된 variable에서는 variable의 value가 colon을 통해 할당된다.
foo: bar Playbook variables task에서 사용할 variable을 정의하는 방법에는 여러가지가 있다.</description>
    </item>
    
    <item>
      <title>Ad Hoc Commands</title>
      <link>http://kimmj.github.io/ansible/ansible-for-devops/ad-hoc-commands/</link>
      <pubDate>Thu, 06 Feb 2020 13:21:42 +0900</pubDate>
      
      <guid>http://kimmj.github.io/ansible/ansible-for-devops/ad-hoc-commands/</guid>
      <description>지난 챕터에서는 Vagrant와 간단한 Ansible playbook으로 local infrastructure를 테스트해보았다. 이번에는 간단한 Ansible ad-hoc command를 사용하여 하나의 명령어로 다수의 remote server에 명령을 보낼 것이다.
나중 챕터에서는 playbook에 대해 자세히 알아볼 것이지만, 지금은 어떻게 Ansible이 하나 이상의 서버에 대해 ad-hoc command로 빠르게 공통적인 일을 수행하는지, 데이터를 가져오는지에 대해 알아볼 것이다.
Conducting an orchestra 각 개인 administrator가 관리하는 서버의 수는 수년간 급격하게 증가했다. 특히 virtualization과 cloud application의 발전은 표준처럼 되었다.
어느 때든 system administrator는 여러가지 업무가 있다.</description>
    </item>
    
    <item>
      <title>if/then/when - Conditionals</title>
      <link>http://kimmj.github.io/ansible/ansible-for-devops/chapter5/conditionals/</link>
      <pubDate>Thu, 12 Mar 2020 10:15:33 +0900</pubDate>
      
      <guid>http://kimmj.github.io/ansible/ansible-for-devops/chapter5/conditionals/</guid>
      <description>많은 task가 특정한 상황에서만 동작해야 하는 조건을 가지고 있다. 몇몇 task는 idempotence가 내장된 module(yum이나 apt 패키지가 설치되어 있는 경우)을 사용하고 우리는 보통 이 task에 대해 추가적인 행동을 정의할 필요가 없다.
하지만 많은 task에서 - 특히 Ansible의 command나 shell module을 사용하는 경우 - 이 module이 실행되고 나서 변화가 있는지 없는지에 따라 또는 실행했을때 실패되었던 경우, 언제 실행될지를 결정하는 추가적인 input을 필요로 하게 된다.
우리는 이런 모든 주된 conditional behavior를 Ansible task에 적용할 수 있도록 할 것이고 또한 Ansible에게 언제 play가 끝나는지 또는 실패하는지를 알려줄수도 있다.</description>
    </item>
    
    <item>
      <title>Delegation Local Actions and Pauses</title>
      <link>http://kimmj.github.io/ansible/ansible-for-devops/chapter5/delegation-local-actions-and-pauses/</link>
      <pubDate>Thu, 12 Mar 2020 13:32:45 +0900</pubDate>
      
      <guid>http://kimmj.github.io/ansible/ansible-for-devops/chapter5/delegation-local-actions-and-pauses/</guid>
      <description>notification을 보내는 것, load balancer와 통신하는것 또는 DNS, 네트워킹에 변화를 주는것, 서버를 모니터링하는 것과 같은 몇몇 task는 Ansible이 host machine(playbook을 실행하는)에서 동작하거나 playbook에 의해 관리되지 않는 host에서 실행할 필요가 있다. Ansible은 delegate_to를 사용한 특정 host에 task를 delegate할 수 있다.
- name: Add server to Munin monitoring configuration. command: monitor-server webservers {{ inventory_hostname }} delegate_to: &amp;#34;{{ monitoring_master }}&amp;#34; delegation은 서버의 load balancer 또는 replication pool에 등록하는 것을 관리하기 위해 사용된다. 우리는 특정한 command를 local에서 실행하거나 Ansible에 내장된 load balancer module을 사용하고 delegate_to를 이용하여 직접 load balancer host에서 command를 실행할 수 있다.</description>
    </item>
    
    <item>
      <title>Prompts</title>
      <link>http://kimmj.github.io/ansible/ansible-for-devops/chapter5/prompts/</link>
      <pubDate>Thu, 12 Mar 2020 19:18:08 +0900</pubDate>
      
      <guid>http://kimmj.github.io/ansible/ansible-for-devops/chapter5/prompts/</guid>
      <description>드문 경우이지만 사용자가 playbook에서 사용할 variable의 값을 입력하게 해야할 경우가 있을 수 있다. playbook이 사용자의 개인 로그인 정보를 필요로 하거나 playbook을 실행하는 사람에 의해 버전이나 다른 값들을 입력받아야 할 때, 어디에서 실행되어야 하는지 알아야 할 때면서 이런 정보들이 configured(environment variable나 inventory variable을 사용하는 것)되는 방법이 없는 경우에는 vars_prompt를 이용한다.
간단한 예시로 사용자에게 username과 password를 입력하게 하여 network share에 로그인할 수 있도록 할 수 있다.
--- - hosts: all vars_prompt: - name: share_user prompt: &amp;#34;What is your network username?</description>
    </item>
    
    <item>
      <title>Summary</title>
      <link>http://kimmj.github.io/ansible/ansible-for-devops/chapter5/summary/</link>
      <pubDate>Thu, 12 Mar 2020 20:17:20 +0900</pubDate>
      
      <guid>http://kimmj.github.io/ansible/ansible-for-devops/chapter5/summary/</guid>
      <description>playbook은 Ansible의 automating infrastructure management의 중요한 수단이다. 이 챕터를 읽은 뒤로 우리는 어떻게 variable, inventory, handler, conditional, tag 등을 사용하는지 알게 되었다.
playbook에 대해서 기본적인 component들을 더 알고싶다면 infrastructure를 Ansible로 만들고 확장하는 것을 해보는 것이 더욱 효과적일 것이다.</description>
    </item>
    
  </channel>
</rss>