<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ansible on Ibiza</title>
    <link>http://kimmj.github.io/tags/ansible/</link>
    <description>Recent content in ansible on Ibiza</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 28 Feb 2020 11:06:02 +0900</lastBuildDate>
    
	<atom:link href="http://kimmj.github.io/tags/ansible/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ansible Playbooks Beyond the Basics</title>
      <link>http://kimmj.github.io/ansible/ansible-for-devops/chapter5/ansible-playbooks-beyond-the-basics/</link>
      <pubDate>Fri, 28 Feb 2020 11:06:02 +0900</pubDate>
      
      <guid>http://kimmj.github.io/ansible/ansible-for-devops/chapter5/ansible-playbooks-beyond-the-basics/</guid>
      <description>playbook과 우리가 이전에 사용한 간단한 playbook organization은 많은 일반적인 use case를 커버할 수 있다. system administration이 필요로 하는 폭에 대해 얘기하자면 Ansible에는 우리가 알아야 할 수많은 기능들이 있다. 우리는 play를 어떻게 더 세분화하여 실행하는지, simplicity와 usability를 위해 어떻게 task와 playbook을 구성하는지, infrastructure를 더 자신있게 다룰 수 있도록 해주는 다른 advanced playbook topic에 대해 다루어 볼 것이다.</description>
    </item>
    
    <item>
      <title>Chapter 1 - Getting Started With Ansible</title>
      <link>http://kimmj.github.io/ansible/ansible-for-devops/getting-started-with-ansible/</link>
      <pubDate>Wed, 05 Feb 2020 01:41:13 +0900</pubDate>
      
      <guid>http://kimmj.github.io/ansible/ansible-for-devops/getting-started-with-ansible/</guid>
      <description>Ansible and Infrastructure Management On snowflakes1 and shell scripts 보통은 SSH를 통해서 접속하여 필요한 작업을 하고 접속을 종료한다. 이 때, 어떤 것들은 기록되고 어떤 것들은 기록되지 않는다. 결국 관리자가 똑같은 작업을 여러 서버에 해야하는 책임소지가 있다.
서버가 동작 중일 때 몇가지 변경사항이 생기고 적용할 방법이 쉽다면 문제가 되진 않을 것이다. 그러나 불행하게도 대부분은 그렇지 않다.
이 때 기존과 똑같은 서버를 만드려고 한다면 정말 많은, 쓸데없는 시간을 소비하게 된다.
shell script로 보완을 하려고 하지만, 모든 edge case를 커버하기란 어려운게 현실이다.</description>
    </item>
    
    <item>
      <title>Chapter 2 - Local Infrastructure Development: Ansible and Vagrant</title>
      <link>http://kimmj.github.io/ansible/ansible-for-devops/local-infrastructure-development-ansible-and-vagrant/</link>
      <pubDate>Wed, 05 Feb 2020 15:09:00 +0900</pubDate>
      
      <guid>http://kimmj.github.io/ansible/ansible-for-devops/local-infrastructure-development-ansible-and-vagrant/</guid>
      <description>Prototyping and testing with local virtual machines Ansible은 remote, local 가리지 않고 연결할 수 있는 서버면 모두 잘 동작한다. 일반적으로 테스트를 할 때, Ansible Playbook 개발 속도를 빠르게 하기 위해 로컬로 테스트한다. 로컬로 하는 것이 실제 환경에서 테스트하는 것보다 훨씬 안전하다.
최근 트렌드는 단연 TDD이다. 따라서 Infrastructure에도 테스트는 필요하다.
소프트웨어에 대한 변경사항은 수동 또는 자동적으로 이루어진다. 이러한 것들이 Ansible과 다른 개발, configuration management 툴과 함께 구현되어 테스트를 할 수 있도록 구현되어있다.</description>
    </item>
    
    <item>
      <title>Ad Hoc Commands</title>
      <link>http://kimmj.github.io/ansible/ansible-for-devops/ad-hoc-commands/</link>
      <pubDate>Thu, 06 Feb 2020 13:21:42 +0900</pubDate>
      
      <guid>http://kimmj.github.io/ansible/ansible-for-devops/ad-hoc-commands/</guid>
      <description>지난 챕터에서는 Vagrant와 간단한 Ansible playbook으로 local infrastructure를 테스트해보았다. 이번에는 간단한 Ansible ad-hoc command를 사용하여 하나의 명령어로 다수의 remote server에 명령을 보낼 것이다.
나중 챕터에서는 playbook에 대해 자세히 알아볼 것이지만, 지금은 어떻게 Ansible이 하나 이상의 서버에 대해 ad-hoc command로 빠르게 공통적인 일을 수행하는지, 데이터를 가져오는지에 대해 알아볼 것이다.
Conducting an orchestra 각 개인 administrator가 관리하는 서버의 수는 수년간 급격하게 증가했다. 특히 virtualization과 cloud application의 발전은 표준처럼 되었다.
어느 때든 system administrator는 여러가지 업무가 있다.</description>
    </item>
    
    <item>
      <title>Ansible Playbooks</title>
      <link>http://kimmj.github.io/ansible/ansible-for-devops/ansible-playbooks/</link>
      <pubDate>Thu, 13 Feb 2020 20:59:01 +0900</pubDate>
      
      <guid>http://kimmj.github.io/ansible/ansible-for-devops/ansible-playbooks/</guid>
      <description>Power plays 다른 여느 configuration management solution처럼 Ansible은 configuration file을 설명하는데 메타포를 사용한다. 이를 playbooks라고 부르고 여기에는 특정한 서버나 특정 서버 그룹에서 실행되는 tasks(Ansible의 용어에서는 play)의 리스트가 있다. 미식 축구에서 팀은 게임에서 이기기 위해 사전 정의된 playbook을 플레이의 기반으로 실행하고 따른다. Ansible에서 우리는 playbook(서버가 특정한 configuration state로 가기 위해 실행해야 하는 스텝들의 리스트)을 작성하고 서버 위에서 play되도록 할 것이다.
Playbook은 configuration을 정의하는 상황에서는 자주 쓰이고 사람이 읽을 수 있는 간단한 문법을 가진 YAML로 작성되어있다.</description>
    </item>
    
    <item>
      <title>Create Vm With Ansible Libvirt</title>
      <link>http://kimmj.github.io/ansible/create-vm-with-ansible-libvirt/</link>
      <pubDate>Wed, 08 Jan 2020 01:52:47 +0900</pubDate>
      
      <guid>http://kimmj.github.io/ansible/create-vm-with-ansible-libvirt/</guid>
      <description>Ansible은 어떠한 프로세스를 자동화 할 때 사용할 수 있는 툴입니다. 그리고 libvirt는 linux 환경에서 qemu를 이용하여 VM을 생성할 때 사용하는 python 모듈입니다.
이 두가지를 합하여 Ansible을 통해 VM을 생성하는 방법에 대해 알아보도록 하겠습니다.
ansible-role-libvirt-vm 참조 Github : https://github.com/stackhpc/ansible-role-libvirt-vm
위의 Github 프로젝트는 libvirt를 ansible에서 사용할 수 있도록 만든 오픈소스입니다. 이를 이용하여 ansible-playbook을 통해 VM을 생성해 볼 것입니다.
이를 로컬에 clone 합니다.
git clone https://github.com/stackhpc/ansible-role-libvirt-vm 테스트 환경 저는 Ubuntu 18.04.3 Desktop을 사용하고 있습니다.</description>
    </item>
    
  </channel>
</rss>