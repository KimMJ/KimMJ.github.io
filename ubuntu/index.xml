<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ubuntu on Ibiza</title>
    <link>http://kimmj.github.io/ubuntu/</link>
    <description>Recent content in Ubuntu on Ibiza</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 Jan 2020 01:51:33 +0900</lastBuildDate>
    
	<atom:link href="http://kimmj.github.io/ubuntu/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>password 없이 ssh 접속하기</title>
      <link>http://kimmj.github.io/ubuntu/ssh-without-password/</link>
      <pubDate>Sat, 15 Feb 2020 15:48:57 +0900</pubDate>
      
      <guid>http://kimmj.github.io/ubuntu/ssh-without-password/</guid>
      <description>자주 접속하는 서버에 패스워드를 항상 입력하는 것은 귀찮은 일이 될 것입니다.
여기에서는 ssh key를 생성하고, 이를 이용하여 인증을 해 password를 입력하지 않는 방법을 알아볼 것입니다.
ssh-keygen을 통한 ssh key 생성 ssh 접속을 할 때 password를 입력했던 것처럼, 항상 ssh 접속을 위해서는 인증을 위한 key가 필요합니다.
인증에 사용할 키를 ssh-keygen으로 생성하는 방법은 다음과 같습니다.
ssh-keygen -t rsa -b 4096 -t는 rsa 알고리즘을 통해 key를 생성하겠다는 의미이며, -b는 key의 사이즈를 정해주는 것입니다.</description>
    </item>
    
    <item>
      <title>SSH Tunneling 사용법</title>
      <link>http://kimmj.github.io/ubuntu/ssh-tunneling/</link>
      <pubDate>Thu, 13 Feb 2020 21:16:02 +0900</pubDate>
      
      <guid>http://kimmj.github.io/ubuntu/ssh-tunneling/</guid>
      <description>-D 옵션으로 socks proxy 사용하기 A라는 서버에서 B라는 서버에 있는 서비스를 보려고 합니다. 이 때, 해당 웹 어플리케이션은 B에서만 연결된 특정 IP로 통신을 하고 있고, 이 때문에 A에서 어플케이션이 제대로 동작하지 않는 상황입니다.
이 때 사용할 수 있는 것이 -D 옵션입니다.
예시
ssh -D 12345 user@server.com 해당 세션이 꺼져있지 않은 상태에서 A 서버에서 웹 브라우저가 localhost:12345를 프록시로 사용하도록 하면 해당 웹 어플리케이션이 제대로 동작합니다.
만약 windows라면 다음과 같이 진행하면 socks proxy를 사용하도록 할 수 있습니다.</description>
    </item>
    
    <item>
      <title>Gateway를 이용하여 SSH 접속하기</title>
      <link>http://kimmj.github.io/ubuntu/ssh-with-jump/</link>
      <pubDate>Wed, 12 Feb 2020 22:08:16 +0900</pubDate>
      
      <guid>http://kimmj.github.io/ubuntu/ssh-with-jump/</guid>
      <description>ssh cli 이용하는 방법 -J 옵션을 이용한다.
ssh user@server -J user2@server2 두개 이상의 경우 ,로 구분한다.
예: user2@server2로 접속 후 user3@server3로 접속한 뒤 user@server로 접속해야 할 경우
ssh user@server -J user2@server2,user3@server3 이 상황에서 ssh-copy-id를 이용해 패스워드를 입력하지 않고 이동하려면
localuser@localhost $ ssh-copy-id user2@server2 localuser@localhost $ ssh user2@server2 user2@server2 $ ssh-copy-id user3@server3 user2@server2 $ ssh user3@server3 user3@server3 $ ssh-copy-id user@server 이후 ssh를 통해 진입하면 패스워드 없이 접속 가능.
만약 port가 필요한 경우 server:port 형태로 입력</description>
    </item>
    
    <item>
      <title>Change Hostname</title>
      <link>http://kimmj.github.io/ubuntu/change-hostname/</link>
      <pubDate>Tue, 14 Jan 2020 01:00:02 +0900</pubDate>
      
      <guid>http://kimmj.github.io/ubuntu/change-hostname/</guid>
      <description>hostname을 바꾸는 일은 흔치 않지만 최초 셋업할 때 많이 사용하곤 합니다.
# hostnamectl set-hostname &amp;lt;host name&amp;gt; hostnamectl set-hostname wonderland 변경 후 터미널을 끄고 재접속을 하면 변경된 사항을 볼 수 있습니다.
hostname </description>
    </item>
    
    <item>
      <title>Unattended Ubuntu</title>
      <link>http://kimmj.github.io/ubuntu/unattended-ubuntu/</link>
      <pubDate>Wed, 08 Jan 2020 01:52:32 +0900</pubDate>
      
      <guid>http://kimmj.github.io/ubuntu/unattended-ubuntu/</guid>
      <description>어디에 좋을까 Ubuntu Server를 설치하기 위해서는 많은 추가 입력이 있어야 합니다. 사용자가 어떻게 설치하기를 원하는지 모르기 때문에, 또 다양한 옵션을 사용자가 선택하기 위해서는 어찌보면 당연한 것이겠지요. 하지만 만약 똑같은 설정을 사용할 것인데, 여러대의 서버에 OS를 설치하는 상황이라고 생각해보면 정말 암울합니다. 온전히 시간을 OS 설치에만 투자하자니 이건 간단한 업무로 인해 다른 업무를 보지 못하게 됩니다. 또 다른 업무와 동시에 하자니 다음 입력창이 뜰 때인지 한번씩 확인해 주어야 합니다.
따라서 어차피 같은 설정을 한다면, 이러한 설정을 미리 해 놓는 방법이 Ubuntu iso 파일 내부에 있을 것이라고 추측했습니다.</description>
    </item>
    
    <item>
      <title>How to Edit Boot Parameter During Install</title>
      <link>http://kimmj.github.io/ubuntu/how-to-edit-boot-parameter-during-install/</link>
      <pubDate>Wed, 08 Jan 2020 01:52:12 +0900</pubDate>
      
      <guid>http://kimmj.github.io/ubuntu/how-to-edit-boot-parameter-during-install/</guid>
      <description>Ubuntu 설치할 때 boot parameter가 필요한 상황이 간혹 발생할 수 있습니다.
특히 저의 경우, preseed.cfg를 수정하기 위해 인스톨러가 질의하는 것이 preseed.cfg의 어떤것과 대응이 되는지를 보기 위해 DEBCONF_DEBUG=5라는 옵션을 boot parameter로 주어야 했습니다. 이 때 사용할 수 있는 방법을 소개드립니다.
먼저 평소와 같이 ubuntu를 설치하기 위해 설치 이미지를 삽입합니다. 그 다음에는 언어를 선택하시면, 다음으로 넘어가기 전에 메뉴가 뜹니다.
이 상태에서 F6을 누르시면 옵션을 선택할 수 있고, 이 때 ESC키를 누르면 boot parameter가 하단에 보일 것입니다.</description>
    </item>
    
    <item>
      <title>How to Use Sudo Without Password</title>
      <link>http://kimmj.github.io/ubuntu/how-to-use-sudo-without-password/</link>
      <pubDate>Wed, 08 Jan 2020 01:51:54 +0900</pubDate>
      
      <guid>http://kimmj.github.io/ubuntu/how-to-use-sudo-without-password/</guid>
      <description>/etc/sudoers는 sudo를 사용할 수 있는 파일입니다. 이 파일을 열어보면 다음과 같은 글이 적혀 있습니다.
 Please consider adding local content in /etc/sudoers.d/ instead of directly modifying this file
 즉, 직접 이 파일을 수정해서 sudo 권한을 주지 말고, /etc/sudoers.d/ 폴더 내에 파일을 추가하라는 의미입니다.
이 곳에는 /etc/sudoers와 마찬가지로 계정에 대한 설정을 추가할 수 있습니다. 그리고 /etc/sudoers에서는 &amp;ldquo;NOPASSWD&amp;quot;라는 옵션을 주어 password없이 타 계정의 권한을 가지게 만들 수 있습니다.
이 두가지를 종합하여 내 linux 계정이 sudo 명령어를 입력할 때, 즉 root 권한을 가지게 될 때 password를 입력하지 않도록 설정할 수 있습니다.</description>
    </item>
    
  </channel>
</rss>